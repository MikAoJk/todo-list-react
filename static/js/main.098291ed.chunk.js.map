{"version":3,"sources":["TodoListItem.tsx","TodoList.tsx","AddTodoForm.tsx","App.tsx","index.tsx"],"names":["TodoListItem","todo","toggleTodo","style","textDecoration","complete","undefined","type","checked","onClick","text","TodoList","todos","map","AddTodoForm","addTodo","useState","setText","value","onChange","e","target","preventDefault","initialTodos","App","setTodos","selectedTodo","newTodos","newTodo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAOaA,EAAgC,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WACjD,OACI,6BACI,wBACIC,MAAO,CAACC,eAAgBH,EAAKI,SAAW,oBAAiBC,GAD7D,UAGI,uBACIC,KAAK,WACLC,QAASP,EAAKI,SACdI,QAAS,WACLP,EAAWD,MAEhB,IACFA,EAAKS,WCZTC,EAA4B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOV,EAAiB,EAAjBA,WAC/C,OACI,6BACKU,EAAMC,KAAI,SAAAZ,GAAI,OACX,cAAC,EAAD,CAA8BA,KAAMA,EAAMC,WAAYA,GAAnCD,EAAKS,YCN3BI,EAA+B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3C,EAAwBC,mBAAS,IAAjC,mBAAON,EAAP,KAAaO,EAAb,KAEA,OACI,iCACI,uBACIV,KAAK,OACLW,MAAOR,EACPS,SAAU,SAAAC,GACNH,EAAQG,EAAEC,OAAOH,UAGzB,wBACIX,KAAK,SACLE,QAAS,SAAAW,GACLA,EAAEE,iBACFP,EAAQL,GACRO,EAAQ,KALhB,0BCdNM,EAAuB,CACzB,CACIb,KAAM,eACNL,UAAU,GAEd,CACIK,KAAM,YACNL,UAAU,IAiCHmB,MA7Bf,WACI,MAA0BR,mBAASO,GAAnC,mBAAOX,EAAP,KAAca,EAAd,KAoBA,OACI,qCACI,cAAC,EAAD,CAAUb,MAAOA,EAAOV,WApBD,SAACwB,GAC5B,IAAMC,EAAWf,EAAMC,KAAI,SAAAZ,GACvB,OAAIA,IAASyB,EACF,2BACAzB,GADP,IAEII,UAAWJ,EAAKI,WAGjBJ,KAEXwB,EAASE,MAWL,cAAC,EAAD,CAAaZ,QARI,SAACL,GACtB,IAAMkB,EAAU,CAAElB,OAAML,UAAU,GAClCoB,EAAS,GAAD,mBAAKb,GAAL,CAAYgB,YC7B5BC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.098291ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Props {\r\n    todo: Todo;\r\n    toggleTodo: ToggleTodo;\r\n}\r\n\r\nexport const TodoListItem: React.FC<Props> = ({todo, toggleTodo}) => {\r\n    return (\r\n        <li>\r\n            <label\r\n                style={{textDecoration: todo.complete ? 'line-through' : undefined}}\r\n            >\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={todo.complete}\r\n                    onClick={() => {\r\n                        toggleTodo(todo);\r\n                    }}\r\n                />{' '}\r\n                {todo.text}\r\n            </label>\r\n        </li>\r\n    );\r\n};","import React from 'react';\r\nimport { TodoListItem } from './TodoListItem';\r\n\r\ninterface Props {\r\n    todos: Todo[];\r\n    toggleTodo: ToggleTodo;\r\n}\r\n\r\nexport const TodoList: React.FC<Props> = ({ todos, toggleTodo }) => {\r\n    return (\r\n        <ul>\r\n            {todos.map(todo => (\r\n                <TodoListItem key={todo.text} todo={todo} toggleTodo={toggleTodo} />\r\n            ))}\r\n        </ul>\r\n    );\r\n};","import React, { useState } from 'react';\r\n\r\ninterface Props {\r\n    addTodo: AddTodo;\r\n}\r\n\r\nexport const AddTodoForm: React.FC<Props> = ({ addTodo }) => {\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <form>\r\n            <input\r\n                type=\"text\"\r\n                value={text}\r\n                onChange={e => {\r\n                    setText(e.target.value);\r\n                }}\r\n            />\r\n            <button\r\n                type=\"submit\"\r\n                onClick={e => {\r\n                    e.preventDefault();\r\n                    addTodo(text);\r\n                    setText('');\r\n                }}\r\n            >\r\n                Add Todo\r\n            </button>\r\n        </form>\r\n    );\r\n};","import React, { useState } from 'react';\r\nimport { TodoList } from './TodoList';\r\nimport { AddTodoForm } from './AddTodoForm';\r\n\r\nconst initialTodos: Todo[] = [\r\n    {\r\n        text: 'Walk the dog',\r\n        complete: false,\r\n    },\r\n    {\r\n        text: 'Write app',\r\n        complete: true,\r\n    },\r\n];\r\n\r\nfunction App() {\r\n    const [todos, setTodos] = useState(initialTodos);\r\n\r\n    const toggleTodo: ToggleTodo = (selectedTodo: Todo) => {\r\n        const newTodos = todos.map(todo => {\r\n            if (todo === selectedTodo) {\r\n                return {\r\n                    ...todo,\r\n                    complete: !todo.complete,\r\n                };\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const addTodo: AddTodo = (text: string) => {\r\n        const newTodo = { text, complete: false };\r\n        setTodos([...todos, newTodo]);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TodoList todos={todos} toggleTodo={toggleTodo} />\r\n            <AddTodoForm addTodo={addTodo} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}